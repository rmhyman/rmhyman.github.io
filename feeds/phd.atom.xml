<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A Pelican Blog</title><link href="/" rel="alternate"></link><link href="/feeds/phd.atom.xml" rel="self"></link><id>/</id><updated>2016-06-12T00:00:00+00:00</updated><entry><title>Data Wrangling OpenStreetMap XML Data for Atlanta, Georgia, USA</title><link href="/data-wrangling-openstreetmap-xml-data-for-atlanta-georgia-usa.html" rel="alternate"></link><published>2016-06-12T00:00:00+00:00</published><author><name>Ransford Hyman Jr.</name></author><id>tag:,2016-06-12:data-wrangling-openstreetmap-xml-data-for-atlanta-georgia-usa.html</id><summary type="html">&lt;h1&gt;Problems Encountered in the Map&lt;/h1&gt;
&lt;p&gt;Since Atlanta is traditionally street names seperated into &lt;em&gt;oridinal directions&lt;/em&gt;, majority of the street names end with one of these oridinal directions (Southwest, Southeast, etc..). Although all of the street names that end with an ordinal direction seemed to have been cleaned well, I thought it would be appropriate to move the direction into a seperate key/value pair.  Thus we will add the key attribute &lt;strong&gt;streetSuffix&lt;/strong&gt; to the dataset to describe the ordinal direction of the street.  There are some street names that have some abbreviations as well as some numbers in the street names. The cleaning plan is as follows:
- Fix street names that end with a direction initial and expand them to the full name
- Move all street names direction suffix to a new key/value pair called &lt;em&gt;streetSuffix&lt;/em&gt;
- Fix all abbreviated street names(Dr., Ave., Blvd.) to their full name&lt;/p&gt;
&lt;p&gt;There are only a small number of addresses with numbers at the end so we will omit them in this project. Most of them belonged to a state Highway.&lt;/p&gt;
&lt;h2&gt;Auditing Process on Postal Codes&lt;/h2&gt;
&lt;p&gt;Some of the postal codes have the full 9 digit code, and there are some that have the State code as a prefix.  Thus our cleaning process will involve:
- Removing the state code from the postal codes
- Move the last 4 digits of the postal code into a new key/value pair called &lt;em&gt;postExt&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The golden standard of the postal codes was generated by Screen Scraping &lt;strong&gt;zipcodestogo.com&lt;/strong&gt;. After a initial audit, I noticed that a large portion of the zipcodes do not belong to the City of Atlanta. Therefore I generated a seperate key/value pair called &lt;em&gt;zipInAtlanta&lt;/em&gt; so that we can perform an analysis on how many entries do not belong to the City of Atlanta.&lt;/p&gt;
&lt;h2&gt;Auditing Process on County field&lt;/h2&gt;
&lt;p&gt;Looking at the county field, I saw that the none of the counties reside in the City of Atlanta. Also, some of the counties have the state code appended to it. Thus as part of the cleaning process, we remove the state code from the end of the county field.   After performing an audit on a sample set, it seems that a good portion of the counties are counties that are not in the City of Atlanta, but belong to the Atlanta Metropolitan area.&lt;/p&gt;
&lt;h2&gt;Data Overview&lt;/h2&gt;
&lt;p&gt;We first run some queries to find out the number of entries and some other auxillary data.&lt;/p&gt;
&lt;h3&gt;Size of OSM file&lt;/h3&gt;
&lt;p&gt;atlanta_georgia.osm - &lt;strong&gt;2.27GB&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pymongo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MongoClient&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mongodb://localhost:27017&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;osm&lt;/span&gt;


&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atlanta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;entries_with_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;address&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$exists&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="n"&gt;addr_entries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atlanta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;entries_with_address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;entries_with_pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pos&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$exists&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="n"&gt;pos_entries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atlanta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;entries_with_pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;entries_with_postcodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;address.postcode&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$exists&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="n"&gt;postcode_entries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atlanta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;entries_with_postcodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Number of entries in database &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Entries with an address field: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;addr_entries&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Entries with postcodes: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;postcode_entries&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Entries with position information&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_entries&lt;/span&gt;

&lt;span class="n"&gt;Number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;entries&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;  &lt;span class="mi"&gt;12167874&lt;/span&gt;
&lt;span class="n"&gt;Entries&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;100744&lt;/span&gt;
&lt;span class="n"&gt;Entries&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;postcodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;82402&lt;/span&gt;
&lt;span class="n"&gt;Entries&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt; &lt;span class="mi"&gt;11390067&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From these inital queries, it seems although many entries have position information, and less than 1% have address information.  Most of the entries with address information seem to have the postal code information as well which is a good thing.&lt;/p&gt;
&lt;h2&gt;Which street suffix was used the most in the address's street names?&lt;/h2&gt;
&lt;p&gt;As I stated above, all street names in the city of Atlanta end with a ordinal direction as a suffix.  Here we find out which street suffix is the most used in our address field. This may give us some insight as to which quandrant of the city is best documented.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;match_pipe = &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;match&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;address&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;exists&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : 1}}}&lt;/span&gt;
&lt;span class="x"&gt;group_pipe = &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;group&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;_id&amp;quot; : &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;streetSuffix&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;, &amp;quot;count&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;sum&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : 1}}}&lt;/span&gt;
&lt;span class="x"&gt;sort_pipe = &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;sort&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;count&amp;quot; : -1}}&lt;/span&gt;
&lt;span class="x"&gt;pipeline = [match_pipe,group_pipe,sort_pipe]&lt;/span&gt;
&lt;span class="x"&gt;result = db.atlanta.aggregate(pipeline)&lt;/span&gt;
&lt;span class="x"&gt;for entry in result:&lt;/span&gt;
&lt;span class="x"&gt;    print(entry)&lt;/span&gt;

&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;u&amp;#39;count&amp;#39;: 88496, u&amp;#39;_id&amp;#39;: None}&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;u&amp;#39;count&amp;#39;: 4261, u&amp;#39;_id&amp;#39;: u&amp;#39;Northwest&amp;#39;}&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;u&amp;#39;count&amp;#39;: 3158, u&amp;#39;_id&amp;#39;: u&amp;#39;Northeast&amp;#39;}&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;u&amp;#39;count&amp;#39;: 2995, u&amp;#39;_id&amp;#39;: u&amp;#39;Southwest&amp;#39;}&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;u&amp;#39;count&amp;#39;: 1602, u&amp;#39;_id&amp;#39;: u&amp;#39;Southeast&amp;#39;}&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;u&amp;#39;count&amp;#39;: 101, u&amp;#39;_id&amp;#39;: u&amp;#39;East&amp;#39;}&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;u&amp;#39;count&amp;#39;: 51, u&amp;#39;_id&amp;#39;: u&amp;#39;South&amp;#39;}&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;u&amp;#39;count&amp;#39;: 50, u&amp;#39;_id&amp;#39;: u&amp;#39;West&amp;#39;}&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;u&amp;#39;count&amp;#39;: 30, u&amp;#39;_id&amp;#39;: u&amp;#39;North&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It seems that Northwest Atlanta is the most used street suffix.  As a fun fact, I went to high school on this side of town.  Most entries in this dataset don't have a suffix at all which hints to me that this dataset is mostly the Atlanta Metro Area outside the city limits.&lt;/p&gt;
&lt;h2&gt;What is the ratio of Zipcodes that are actually in the City of Atlanta?&lt;/h2&gt;
&lt;p&gt;To further my hypothesis of whether most of the entries are not in the city of Atlanta, I seek out to find out how many of the zipcodes actually are within the city of Atlanta&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;match_pipe = &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;match&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;address.zipInAtlanta&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;exists&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : 1}}}&lt;/span&gt;
&lt;span class="x"&gt;group_pipe = &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;group&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;_id&amp;quot; : &amp;#39;null&amp;#39;, &amp;quot;count&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;sum&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : 1}}}&lt;/span&gt;
&lt;span class="x"&gt;pipeline = [match_pipe,group_pipe]&lt;/span&gt;
&lt;span class="x"&gt;result = db.atlanta.aggregate(pipeline)&lt;/span&gt;
&lt;span class="x"&gt;total = 0&lt;/span&gt;
&lt;span class="x"&gt;for entry in result:&lt;/span&gt;
&lt;span class="x"&gt;    total = entry[&amp;#39;count&amp;#39;]&lt;/span&gt;
&lt;span class="x"&gt;    print(entry)&lt;/span&gt;

&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;u&amp;#39;count&amp;#39;: 82402, u&amp;#39;_id&amp;#39;: u&amp;#39;null&amp;#39;}&lt;/span&gt;



&lt;span class="x"&gt;match_pipe = &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;match&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;address.zipInAtlanta&amp;quot; : &amp;#39;T&amp;#39;}}&lt;/span&gt;
&lt;span class="x"&gt;group_pipe = &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;group&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;_id&amp;quot; : &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;zipInAtlanta&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;, &amp;quot;count&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;sum&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : 1}}}&lt;/span&gt;
&lt;span class="x"&gt;pipeline = [match_pipe,group_pipe]&lt;/span&gt;
&lt;span class="x"&gt;result = db.atlanta.aggregate(pipeline)&lt;/span&gt;
&lt;span class="x"&gt;in_atl = 0&lt;/span&gt;
&lt;span class="x"&gt;for entry in result:&lt;/span&gt;
&lt;span class="x"&gt;    in_atl = entry[&amp;#39;count&amp;#39;]&lt;/span&gt;
&lt;span class="x"&gt;    print(entry)&lt;/span&gt;

&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;u&amp;#39;count&amp;#39;: 17895, u&amp;#39;_id&amp;#39;: u&amp;#39;T&amp;#39;}&lt;/span&gt;



&lt;span class="x"&gt;print &amp;quot;Ratio of zip codes entries that are in Atlanta City Limits:&amp;quot;, float(in_atl)/float(total)&lt;/span&gt;

&lt;span class="x"&gt;Ratio of zip codes entries that are in Atlanta City Limits: 0.217167059052&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The fact that only 22% of zip codes are within the city limits increases my confidence that majority of this dataset is Atlanta Metro Area.  One can also conclude that most of the contributions are done on areas not within the city of Atlanta.&lt;/p&gt;
&lt;h2&gt;Which Zipcode is the most common?&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;match_pipe = &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;match&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;address.postcode&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;exists&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : 1}}}&lt;/span&gt;
&lt;span class="x"&gt;group_pipe = &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;group&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;_id&amp;quot; : &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;postcode&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;, &amp;quot;count&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;sum&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : 1}}}&lt;/span&gt;
&lt;span class="x"&gt;sort_pipe = &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;sort&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;count&amp;quot; : -1}}&lt;/span&gt;
&lt;span class="x"&gt;limit_pipe = &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;limit&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : 1}&lt;/span&gt;
&lt;span class="x"&gt;pipeline = [match_pipe,group_pipe,sort_pipe,limit_pipe]&lt;/span&gt;
&lt;span class="x"&gt;result = db.atlanta.aggregate(pipeline)&lt;/span&gt;
&lt;span class="x"&gt;for entry in result:&lt;/span&gt;
&lt;span class="x"&gt;    print entry&lt;/span&gt;

&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;u&amp;#39;count&amp;#39;: 7259, u&amp;#39;_id&amp;#39;: 30114}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This zipcode belongs to Canton, Georgia which is apart of the Atlanta Metropolitan area.&lt;/p&gt;
&lt;h2&gt;What is the most common amenity in Atlanta?&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;match_pipe = &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;match&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;amenity&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;exists&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : 1}}}&lt;/span&gt;
&lt;span class="x"&gt;group_pipe = &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;group&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;_id&amp;quot; : &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;amenity&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;, &amp;quot;count&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;sum&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : 1}}}&lt;/span&gt;
&lt;span class="x"&gt;sort_pipe = &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;sort&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;count&amp;quot; : -1}}&lt;/span&gt;
&lt;span class="x"&gt;limit_pipe = &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;limit&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : 1}&lt;/span&gt;
&lt;span class="x"&gt;pipeline = [match_pipe,group_pipe,sort_pipe,limit_pipe]&lt;/span&gt;
&lt;span class="x"&gt;result = db.atlanta.aggregate(pipeline)&lt;/span&gt;
&lt;span class="x"&gt;for entry in result:&lt;/span&gt;
&lt;span class="x"&gt;    print entry&lt;/span&gt;

&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;u&amp;#39;count&amp;#39;: 5609, u&amp;#39;_id&amp;#39;: u&amp;#39;place_of_worship&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is no surprise that the most common amenity is a place of worship.  The only thing bigger than Texas in the Southern U.S. is Religion.&lt;/p&gt;
&lt;h2&gt;Which user contributed the most to this dataset?&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;group_pipe = &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;group&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;_id&amp;quot; : &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;created&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;, &amp;quot;count&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;sum&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : 1}}}&lt;/span&gt;
&lt;span class="x"&gt;sort_pipe = &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;sort&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;count&amp;quot; : -1}}&lt;/span&gt;
&lt;span class="x"&gt;limit_pipe = &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;limit&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; : 1}&lt;/span&gt;
&lt;span class="x"&gt;pipeline = [match_pipe,group_pipe,sort_pipe,limit_pipe]&lt;/span&gt;
&lt;span class="x"&gt;result = db.atlanta.aggregate(pipeline)&lt;/span&gt;
&lt;span class="x"&gt;for entry in result:&lt;/span&gt;
&lt;span class="x"&gt;    print entry&lt;/span&gt;

&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;u&amp;#39;count&amp;#39;: 4057, u&amp;#39;_id&amp;#39;: u&amp;#39;iandees&amp;#39;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This doesn't look like a bot name so I must commend &lt;em&gt;iandees&lt;/em&gt; for making so many contributions to the Atlanta OSM map.&lt;/p&gt;
&lt;h2&gt;Additional Ideas for improving the dataset&lt;/h2&gt;
&lt;p&gt;Since this dataset is the Atlanta Metro area, it would be nice if the county field was more populated so that one can perform data analysis on a county by county granularity.  There are quite a few counties within the Atlanta Metro area so it is worthy field within the dataset.  Also there needs to be an audit on the data to remove the data generated by the &lt;strong&gt;TIGER&lt;/strong&gt; project as most of the entries I saw didn't seem correct(Most of them seem to belong to Alabama), but these were &lt;em&gt;way&lt;/em&gt; nodes and there was not a lot of auditing done by me on the &lt;em&gt;way&lt;/em&gt; nodes.  Another analysis that I thought would be good to do is get the min/max longitude and latitude values to assure that all of the entries are within the Atlanta Metro boundaries.  Below I give some other suggestions to not only improve the City of Atlanta's dataset, but OpenStreetMap data as a whole.&lt;/p&gt;
&lt;h3&gt;University-level involvement&lt;/h3&gt;
&lt;p&gt;There are two big universities in downtown Atlanta (Georgia State University, and Georgia Institute of Technology) that could become involved with the OSM project.  There are many core concepts that can be learned by the students while cleaning up the dataset in the process.  Some that comes to mind are:
- Data Structures course:  Have a project assignment in which students create a data structure that generates a standard document format. For extra credit, students could submit their changes to OSM for review
- Algorithms course: Have an assignment in which students creates an algorithm that takes some OSM data as input and outputs the data in some given format.  The assignment could be tailored in which students will try to create the most optimal algorithm and evaluate the run-time of their algorithm.&lt;/p&gt;
&lt;p&gt;The benefits of this idea is that it gives students some hands-on experience with real-world application of the knowledge they have obtained while also giving benefits to the OSM community.&lt;/p&gt;
&lt;h3&gt;Challenge-based involvement&lt;/h3&gt;
&lt;p&gt;Another opportunity for improving the dataset is to turn it into a challenge or contest on platforms such as &lt;strong&gt;Kaggle&lt;/strong&gt; or &lt;strong&gt;Hackerrank&lt;/strong&gt;.  Participants could be given a unique but constant size dataset that is similar in complexity and see who can clean the data the fastest.  Submissions could be passed into a checker tool which can give some measurement of how clean the dataset is based on some given criteria. The participants with the highest measure of "cleanliness" wins the challenge. The challenges could be sweetened by giving away some prizes such as T-shirts or some award plaque that could be added to one's professional profile.&lt;/p&gt;
&lt;h3&gt;Global Day of Cleaning OpenStreetMap&lt;/h3&gt;
&lt;p&gt;Similar to the Global Day of CodeRetreat, the OSM community could hold a Global Day of Cleaning OpenStreetMap.  The event could also be driven by professional organizations such as ACM or IEEE in which each chapter can register for the event.  To avoid duplication, there could be central sites for the various regions that are participating and they could be assigned data within some perimeter of their location.  Each team could share their progress by posting before/after pictures of maps that they cleaned onto a specific site or through social media.  One drawback from this method is that areas where there is not any expertise in working with OSM data gets left out.  So as an alternative strategy, the OSM community could select regions where there are no participants or have limited resources due to their economic circumstances and have programmers around the world help clean up the map data in those areas.  This brings a "social good" proponent to the activity which benefits the global community.&lt;/p&gt;</summary><category term="Python"></category><category term="MongoDB"></category><category term="Wrangling"></category><category term="XML"></category><category term="MapReduce"></category></entry></feed>